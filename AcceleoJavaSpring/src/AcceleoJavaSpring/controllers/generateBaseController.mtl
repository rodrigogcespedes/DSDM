[comment encoding = UTF-8 /]
[module generateBaseController('http://www.example.org/diagramaClasesCompleto')]


[template public generateBaseController(raiz : DiagramaClases)]

[file ('src/main/java/'+raiz.artefacto_contenido.grupoId+'.'+raiz.artefacto_contenido.artefactotId+'/controllers/BaseController.java', false, 'UTF-8')]
package [raiz.artefacto_contenido.grupoId/].[raiz.artefacto_contenido.artefactotId/].controllers;

import [raiz.artefacto_contenido.grupoId/].[raiz.artefacto_contenido.artefactotId/].entities.BaseEntity;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;


import java.io.Serializable;

public interface BaseController<E extends BaseEntity, ID extends Serializable> {

    public ResponseEntity<?> getAll();
    public ResponseEntity<?> getOne(@PathVariable ID id);
    public ResponseEntity<?> save(@RequestBody E entity );
    public ResponseEntity<?> update(@PathVariable ID id, @RequestBody E entity );
    public ResponseEntity<?> delete(@PathVariable ID id);
}

[/file]

[file ('src/main/java/'+raiz.artefacto_contenido.grupoId+'.'+raiz.artefacto_contenido.artefactotId+'/controllers/BaseControllerImpl.java', false, 'UTF-8')]
package [raiz.artefacto_contenido.grupoId/].[raiz.artefacto_contenido.artefactotId/].controllers;

import [raiz.artefacto_contenido.grupoId/].[raiz.artefacto_contenido.artefactotId/].entities.BaseEntity;
import [raiz.artefacto_contenido.grupoId/].[raiz.artefacto_contenido.artefactotId/].services.BaseServiceImpl;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.io.Serializable;

public abstract class BaseControllerImpl<E extends BaseEntity, S extends BaseServiceImpl<E,Long>> implements BaseController<E,Long>{

    @Autowired
    public S service;

	@Operation(summary = "Este metodo devuelve una lista de objetos")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200",
            description = "trae una lista de objetos del Controller correspondiente",
            content = {@Content}),
            @ApiResponse(responseCode = "404",
            description = "el controlador no se encuentra, o no es posible comunicarse con la base de datos",
            content = @Content)

    })
    @GetMapping("")
    public ResponseEntity<?> getAll() {
        try{
            return ResponseEntity.status(HttpStatus.OK).body(service.findAll());
        }catch (Exception e){
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("{\"error\":\"Error\"}");
        }
    }
	
	@Operation(summary = "Este metodo devuelve un objeto", parameters = @Parameter(name = "id", in = ParameterIn.PATH, required = true, schema = @Schema( type = "Long")))
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200",
                    description = "trae un objeto del Controller correspondiente",
                    content = {@Content(mediaType = "application/json")}),
            @ApiResponse(responseCode = "404",
                    description = "el controlador no se encuentra, o no es posible comunicarse con la base de datos",
                    content = @Content)

    })
    @GetMapping("/{id}")
    public ResponseEntity<?> getOne(@PathVariable Long id) {
        try{
            return ResponseEntity.status(HttpStatus.OK).body(service.findById(id));
        }catch (Exception e){
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("{\"error\":\"Error\"}");
        }
    }

	@Operation(summary = "Este metodo guarda un objeto en la base de datos", parameters = @Parameter(name = "entity", in = ParameterIn.PATH, required = true, schema = @Schema( type = "Object")))
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200",
                    description = "guarda un objeto en la base de datos",
                    content = {@Content(mediaType = "application/json")}),
            @ApiResponse(responseCode = "404",
                    description = "el controlador no se encuentra, o no es posible comunicarse con la base de datos",
                    content = @Content)

    })
    @PostMapping("")
    public ResponseEntity<?> save(@RequestBody E entity) {
        try{
            return ResponseEntity.status(HttpStatus.OK).body(service.save(entity));
        }catch (Exception e){
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("{\"error\":\"Error\"}");
        }

    }

	@Operation(summary = "Este metodo recibe un id y actualiza el objeto asociado", parameters = @Parameter(name = "id", in = ParameterIn.PATH, required = true, schema = @Schema( type = "Long")))
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200",
                    description = "actualiza un objeto en la base de datos",
                    content = {@Content(mediaType = "application/json")}),
            @ApiResponse(responseCode = "404",
                    description = "el controlador no se encuentra, o no es posible comunicarse con la base de datos",
                    content = @Content)

    })
    @PutMapping("/{id}")
    public ResponseEntity<?> update(@PathVariable Long id,@RequestBody E entity) {
        try{
            return ResponseEntity.status(HttpStatus.OK).body(service.update(id,entity));
        }catch (Exception e){
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("{\"error\":\"Error\"}");
        }
    }

	@Operation(summary = "Este metodo recibe un id y elimina el objeto asociado", parameters = @Parameter(name = "id", in = ParameterIn.PATH, required = true, schema = @Schema( type = "Long")))
    @ApiResponses(value = {
            @ApiResponse(responseCode = "204",
                    description = "elimina un objeto en la base de datos",
                    content = {@Content(mediaType = "application/json")}),
            @ApiResponse(responseCode = "404",
                    description = "el controlador no se encuentra, o no es posible comunicarse con la base de datos",
                    content = @Content)

    })
    @DeleteMapping("/{id}")
    public ResponseEntity<?> delete(@PathVariable Long id) {
        try{
            return ResponseEntity.status(HttpStatus.OK).body(service.delete(id));
        }catch (Exception e){
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("{\"error\":\"Error\"}");
        }
    }
}
[/file]

[/template]
